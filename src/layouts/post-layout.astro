---
import TableOfContents from "@/components/table-of-contents";
import BaseLayout from "./base-layout.astro";

const { frontmatter, headings } = Astro.props;
---

<BaseLayout title={frontmatter.title}>
  <div class="flex max-w-[1000px] mx-auto">
    <aside class="md:flex grow flex-col gap-8 hidden">
      <div
        class="sticky top-24 self-start hidden md:block transition-all duration-200"
      >
        {headings && headings.length > 0 && <TableOfContents {headings} />}
      </div>
    </aside>
    <main
      class="relative z-30 grow-[2] pb-1 mt-10 bg-white dark:bg-neutral-950 md:rounded-t-md text-neutral-900"
    >
      <div
        class="relative flex flex-col px-5 pt-6 border-t border-b-0 md:border-r md:border-l md:pt-20 lg:px-0 justify-stretch md:rounded-t-2xl border-neutral-200 dark:border-neutral-800"
      >
        <div
          class="absolute top-0 left-0 hidden w-px h-full mt-1 -translate-x-px md:block bg-gradient-to-b from-transparent to-white dark:to-neutral-950"
        >
        </div>
        <div
          class="absolute top-0 right-0 hidden w-px h-full mt-1 translate-x-px md:block bg-gradient-to-b from-transparent to-white dark:to-neutral-950"
        >
        </div>
        <h1
          class="w-full max-w-2xl mx-auto text-3xl font-bold leading-tight tracking-tighter text-left md:mb-12 md:text-4xl dark:text-neutral-100 lg:text-5xl md:leading-none"
        >
          {frontmatter.title}
        </h1>
      </div>

      <article
        class="w-full max-w-2xl mx-auto mb-20 prose-sm prose px-7 lg:px-0 lg:prose-lg dark:prose-invert"
      >
        <slot />
      </article>
    </main>
  </div>
</BaseLayout>

<script>
  const fnObserver = () => {
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver
    ) {
      entries.forEach((entry) => {
        const index = document.querySelector(
          `aside a[href="#${entry.target.id}"]`
        );

        if (entry.isIntersecting) {
          index?.classList.remove("bg-slate-200", "dark:bg-slate-800"); // remove bg
          index?.classList.add(
            "bg-sky-600",
            "dark:bg-sky-700",
            "text-white",
            "font-bold",
            "transition-colors",
            "duration-200"
          );
        } else {
          index?.classList.add("bg-slate-200", "dark:bg-slate-800"); // add bg
          index?.classList.remove(
            "bg-sky-600",
            "dark:bg-sky-700",
            "text-white",
            "font-bold",
            "transition-colors",
            "duration-200"
          );
        }
      });
    }

    const headings = document.querySelectorAll("h1, h2, h3, h4, h5, h6");

    const options = {
      root: null,
      rootMargin: " 15% 0px 0% 0px ",
      threshold: 1,
    };

    const observer = new IntersectionObserver(handleIntersection, options);

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  };
  fnObserver();
  document.addEventListener("astro:after-swap", fnObserver);
</script>
